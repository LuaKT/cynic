---
source: cynic-codegen/tests/use-schema.rs
expression: "format_code(format!(\"{}\", tokens))"

---
impl ::cynic::schema::QueryRoot for QueryRoot {}
impl ::cynic::schema::MutationRoot for MutationRoot {}
impl ::cynic::schema::SuscriptionRoot for SubscriptionRoot {}
pub struct Book;
pub mod book_fields {
    pub struct Id;
    impl ::cynic::schema::Field for Id {
        type SchemaType = String;
        fn name() -> &'static str {
            "id"
        }
    }
    impl ::cynic::schema::HasField<Id, String> for super::Book {}
    pub struct Name;
    impl ::cynic::schema::Field for Name {
        type SchemaType = String;
        fn name() -> &'static str {
            "name"
        }
    }
    impl ::cynic::schema::HasField<Name, String> for super::Book {}
    pub struct Author;
    impl ::cynic::schema::Field for Author {
        type SchemaType = String;
        fn name() -> &'static str {
            "author"
        }
    }
    impl ::cynic::schema::HasField<Author, String> for super::Book {}
}
pub struct BookChanged;
pub mod book_changed_fields {
    pub struct MutationType;
    impl ::cynic::schema::Field for MutationType {
        type SchemaType = super::MutationType;
        fn name() -> &'static str {
            "mutationType"
        }
    }
    impl ::cynic::schema::HasField<MutationType, super::MutationType> for super::BookChanged {}
    pub struct Id;
    impl ::cynic::schema::Field for Id {
        type SchemaType = ::cynic::Id;
        fn name() -> &'static str {
            "id"
        }
    }
    impl ::cynic::schema::HasField<Id, ::cynic::Id> for super::BookChanged {}
    pub struct Book;
    impl ::cynic::schema::Field for Book {
        type SchemaType = Option<super::Book>;
        fn name() -> &'static str {
            "book"
        }
    }
    impl ::cynic::schema::HasField<Book, Option<super::Book>> for super::BookChanged {}
}
pub struct MutationRoot;
pub mod mutation_root_fields {
    pub struct CreateBook;
    impl ::cynic::schema::Field for CreateBook {
        type SchemaType = ::cynic::Id;
        fn name() -> &'static str {
            "createBook"
        }
    }
    impl ::cynic::schema::HasField<CreateBook, ::cynic::Id> for super::MutationRoot {}
    pub struct DeleteBook;
    impl ::cynic::schema::Field for DeleteBook {
        type SchemaType = bool;
        fn name() -> &'static str {
            "deleteBook"
        }
    }
    impl ::cynic::schema::HasField<DeleteBook, bool> for super::MutationRoot {}
}
pub struct MutationType {}
pub struct QueryRoot;
pub mod query_root_fields {
    pub struct Books;
    impl ::cynic::schema::Field for Books {
        type SchemaType = Vec<super::Book>;
        fn name() -> &'static str {
            "books"
        }
    }
    impl ::cynic::schema::HasField<Books, Vec<super::Book>> for super::QueryRoot {}
}
pub struct SubscriptionRoot;
pub mod subscription_root_fields {
    pub struct Interval;
    impl ::cynic::schema::Field for Interval {
        type SchemaType = i32;
        fn name() -> &'static str {
            "interval"
        }
    }
    impl ::cynic::schema::HasField<Interval, i32> for super::SubscriptionRoot {}
    pub struct Books;
    impl ::cynic::schema::Field for Books {
        type SchemaType = super::BookChanged;
        fn name() -> &'static str {
            "books"
        }
    }
    impl ::cynic::schema::HasField<Books, super::BookChanged> for super::SubscriptionRoot {}
}
impl ::cynic::schema::NamedType for Book {
    fn name() -> &'static str {
        "Book"
    }
}
impl ::cynic::schema::NamedType for BookChanged {
    fn name() -> &'static str {
        "BookChanged"
    }
}
impl ::cynic::schema::NamedType for MutationRoot {
    fn name() -> &'static str {
        "MutationRoot"
    }
}
impl ::cynic::schema::NamedType for QueryRoot {
    fn name() -> &'static str {
        "QueryRoot"
    }
}
impl ::cynic::schema::NamedType for SubscriptionRoot {
    fn name() -> &'static str {
        "SubscriptionRoot"
    }
}

